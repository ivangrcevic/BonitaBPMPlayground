{"designerVersion":"1.4.26","id":"customFirmaDigital","name":"FirmaDigital","lastUpdate":1505439913465,"template":"<!-- The custom widget template is defined here\n   - You can use standard HTML tags and AngularJS built-in directives, scope and interpolation system\n   - Custom widget properties defined on the right can be used as variables in a templates with properties.newProperty\n   - Functions exposed in the controller can be used with ctrl.newFunction()\n   - You can use the 'environment' property injected in the scope when inside the Editor whiteboard. It allows to define a mockup\n     of the Custom Widget to be displayed in the whiteboard only. By default the widget is represented by an auto-generated icon\n     and its name (See the <span> below).\n-->\n\n    <div class=\"digital-signature-uic\">\n        <span ng-if=\"environment\"><identicon name=\"{{environment.component.id}}\" size=\"30\" background-color=\"[255,255,255, 0]\" foreground-color=\"[51,51,51]\"></identicon> {{environment.component.name}}</span>\n        <p>{{properties.value}}</p>\n        <p>{{properties.formOutput}}</p>\n        <p><label for=\"file\">{{texts['label.text']}}</label></p>\n        <input type=\"file\" class=\"file-loader\" name=\"file\" > \n        <button type=\"button\" class=\"sign-button\" ng-click=\"sign()\" ng-hide=\"!file\"> \n           {{texts['signButton.text']}} \n        </button>\n    </div>\n\n<!-- \n    \n    \n    <div style=\"color: {{ properties.color }}; background-color: {{ backgroudColor }}\" ng-click=\"ctrl.toggleBackgroundColor()\">\n        Value is:  <i>{{ properties.value }}</i>. Click me to toggle background color\n    </div>\n-->","controller":"/**\n * The controller is a JavaScript function that augments the AngularJS scope and exposes functions that can be used in the custom widget template\n * \n * Custom widget properties defined on the right can be used as variables in a controller with $scope.properties\n * To use AngularJS standard services, you must declare them in the main function arguments.\n * \n * You can leave the controller empty if you do not need it.\n */\nfunction digitalSignatureController($scope, $element, $q) {\n    \n    function doLoadPrivateKeyFromPEM (pemFile, password) {\n        var deferred = $q.defer();\n        //load file\n        var reader = new FileReader();\n        reader.onload = (function (){\n            return function(evt) {\n                var content = evt.target.result;\n                var privateKey = forge.pki.decryptRsaPrivateKey(content, password);\n                deferred.resolve(privateKey);\n            };\n        })();\n        reader.readAsBinaryString(pemFile);\n        return deferred.promise;\n    }\n    \n    function doSign (privateKey, string) {\n        //Create message digest with SHA1\n        // TODO : USAR HMAC!!!!\n        var md = forge.md.sha1.create();\n        md.update(string);\n        //sign with RSA algorithm (default)\n        return privateKey.sign(md);\n    }\n    \n    function promptForPassword() {\n        var deferred = $q.defer();\n\n        var password  = window.prompt($scope.texts[\"psswdPromt.text\"]);\n        deferred.resolve(password);\n\n        return deferred.promise;\n    }\n    \n    \n    var TEXTS = {\n        \"es\": {\n            \"label.text\": \"Firmar con certificado:\",\n            \"signButton.text\": \"Firmar\",\n            \"psswdPromt.text\": \"Ingrese contraseña... \"\n        },\n        \"en\": {\n            \"label.text\": \"Sign with certificate:\",\n            \"signButton.text\": \"Sign\",\n            \"psswdPromt.text\": \"Enter Password... \"\n        }\n    };\n    var LANGUAGE = \"es\";\n    \n    $scope.texts = TEXTS[LANGUAGE];\n    \n    var fileInput = $element.find(\"input\")[0]\n    fileInput.onchange = function (changeEvent) {\n        $scope.$apply(function() {\n            $scope.file = changeEvent.target.files[0];\n        });\n    };\n    \n    $scope.sign = function (){\n        promptForPassword().then(function (password){\n            doLoadPrivateKeyFromPEM($scope.file, password).then(function (privateKey){\n                if(privateKey){\n                    var textToSign = JSON.stringify($scope.properties.formOutput)\n                    $scope.value = doSign(privateKey, textToSign);    \n                } else {\n                    alert(\"Invalid password\");\n                }\n            });\n        }, function (err){\n            console.log(err);\n        });\n    }\n \n \n}","description":"Componente para firmar digitalmente los datos enviados por el formulario.","custom":true,"properties":[{"label":"Value","name":"value","type":"text","defaultValue":"","bond":"expression"},{"label":"Variable salida del formulario","name":"formOutput","help":"Típicamente se asigna la variable formOutput","type":"text","bond":"variable"},{"label":"Formulario","name":"form","caption":"form","type":"text","bond":"variable"}],"assets":[{"id":"822a760b-f156-470b-998b-6b27997fe022","name":"forge.bundle.js","type":"js","order":3,"external":false},{"id":"454ec526-c807-4943-a54e-445965c2010d","name":"signer.css","type":"css","order":6,"external":false}],"requiredModules":[],"type":"widget"}